setwd("~/Library/CloudStorage/Box-Box/Hanqing/SparseMatrices/Programming/Test_Hanqing?/After2024Sept/dev")

detach("package:DyadiCpp", unload=TRUE)
remove.packages("DyadiCpp")
# devtools::install(pkg="../DyadiCpp_working", build=TRUE, keep_source=TRUE)
# devtools::install(pkg="./DyadiCpp", keep_source=TRUE)
# ?devtools::install
install.packages(".", repos=NULL, type="source")

devtools::load_all()

devtools::clean_dll()

devtools::document()

# R CMD Rd2pdf .
################################################################################################################################################################################################################################################################################################################
library(DyadiCpp)
library(microbenchmark)

N = 4
k = 3

test3 = construct(N, k, type="vert", distr="unif")
test33 = test3 %*% test3
mat3 = as.matrix(test3)
mat33 = as.matrix(test33)

test3tt = t(test3)
max(abs(as.matrix(test3tt) - t(as.matrix(test3))))

max(abs(mat3 %*% mat3 - mat33))

test4 = construct(N, k, type="horiz", distr="unif")
mat4 = as.matrix(test4)

test43 = test4 %*% test3
mat43 = as.matrix(test43)

max(abs(mat4 %*% mat3 - mat43))

test6 = construct(N, k, type="asymm", distr="unif")
test6t = t(test6)
mat6 = as.matrix(test6)
mat6t = as.matrix(test6t)

max(abs(t(mat6t) - mat6))
max(abs(mat6t - mat6t_old))

test63 = test6 %*% test3
mat6 = as.matrix(test6)
mat3 = as.matrix(test3)
max(abs(as.matrix(test63) - mat6 %*% mat3))

test46 = test4 %*% test6
mat4 = as.matrix(test4)
mat46 = as.matrix(test46)
max(abs(mat46 - mat4 %*% mat6))

mat36 = test3 %*% test6
max(abs(mat36 - mat3 %*% mat6))

mat64 = test6 %*% test4
max(abs(mat64 - mat6 %*% mat4))


test7 = construct(N, k, type="symm", distr="unif")
mat7 = as.matrix(test7)
max(abs(mat7 - t(mat7)))

test37 = test3 %*% test7
max(abs(test37 - mat3 %*% mat7))

test74 = test7 %*% test4
max(abs(test74 - mat7 %*% mat4))

test47 = test4 %*% test7
max(abs(as.matrix(test47) - mat4 %*% mat7))
# View(as.matrix(test47))
# View(mat4 %*% mat7)

test8 = construct(N, k, type="symm", distr="unif")
mat8 = as.matrix(test8)

test87 = test8 %*% test7
max(abs(test87- mat8 %*% mat7))

test8@type
test6@type

test86 = test8 %*% test6
max(abs(test86- mat8 %*% mat6))

test68 = test6 %*% test8
max(abs(test68- mat6 %*% mat8))

test66 = test6 %*% test6
max(abs(test66- mat6 %*% mat6))


################################################################ Test for the dyadic algorithm

devtools::load_all()
test3 = construct(N, k, type="vert", distr="unif")
psd_test1 = t(test3) %*% test3
psd_test1@type = "symm"
psd_test1@aentries = list()

psd_mat1 = as.matrix(psd_test1)
min(eigen(psd_mat1)$values)

new_entries = dyadalg(psd_test1)

psd_p_test1 = test3
psd_p_test1@entries = new_entries
p_mat1 = as.matrix(psd_p_test1)

max(abs(t(p_mat1) %*% psd_mat1 %*% p_mat1 - diag(dim(psd_mat1)[1])))

View(round(as.matrix(t(psd_p_test1) %*% psd_test1 %*% psd_p_test1), 4))

p_test1 = new_entries[[1]][1:3, 1:3]
h_test1 = psd_test1@entries[[1]][1:3, 1:3]
h_test1 = h_test1 + t(h_test1)
diag(h_test1) = diag(h_test1) / 2
t(p_test1) %*% h_test1 %*% p_test1 # passed if identity



################################################################ Test for speed

N1 = 10
k1 = 4
set.seed(100)
sp_test1 = construct(N1, k1, type="vert", distr="unif")
sp_test2 = t(sp_test1)
sp_test3 = construct(N1, k1, type="symm", distr="unif")
sp_test4 = construct(N1, k1, type="asymm", distr="unif")

sp_test5 = t(sp_test1) %*% sp_test1
sp_test5@type = "symm"
sp_test5@aentries = list()

mat_test1 = as.matrix(sp_test1)
mat_test2 = as.matrix(sp_test2)
mat_test3 = as.matrix(sp_test3)
mat_test4 = as.matrix(sp_test4)
mat_test5 = as.matrix(sp_test5)

benchmark_results <- microbenchmark(
    copy_and_modify = {
        sp_test2 <- sp_test1
        sp_test2@entries <- multiply_vv(sp_test1@entries, sp_test1@entries, N1, k1)
    },
    new_and_modify = {
        sp_test2 <- new("Dyadic", height = sp_test1@height, breadth=sp_test1@breadth, type="vert", entries = multiply_vv(sp_test1@entries, sp_test1@entries, N1, k1))
    },
    times = 500
)

benchmark_results_2 <- microbenchmark(
    asymm = {
        as.matrix(sp_test4)
    },
    v = {
        as.matrix(sp_test1)
    },
    h = {
        as.matrix(sp_test2)
    },
    symm = {
        as.matrix(sp_test3)
    },
    times = 100
)

benchmark_results_2

sp_mat1 = as.matrix(sp_test1)
benchmark_results_21 <- microbenchmark(
    t = {
        t(sp_mat1)
    },
    times = 100
)

benchmark_results_21

# > benchmark_results_2
# Unit: milliseconds
# expr       min        lq      mean    median        uq      max neval  cld
# asymm 106.93403 116.45714 119.93998 119.08501 121.31465 222.2603   100 a
# v  32.01538  36.37912  39.28858  37.33610  38.33277 133.3318   100  b
# h  88.54729  92.91855  96.01124  94.82078  96.25740 203.0166   100   c
# symm  95.30241 103.97424 106.51644 106.88313 108.98634 116.3632   100    d

benchmark_results_3 <- microbenchmark(
    old = {
        sp_asv = sp_test4 %*% sp_test1
    },
    new = {
        sp_asv = sp_test4
        res_list = multiply_asv(sp_test4@entries, sp_test4@aentries, sp_test1@entries, sp_test4@height, sp_test4@breadth)
        sp_asv@entries = res_list[[1]]
        sp_asv@aentries = res_list[[2]]
    },
    times = 100
)

benchmark_results_4 <- microbenchmark(
    now_asymm = {
        sp_test4%*%sp_test1
    },
    now_symm = {
        sp_test3%*%sp_test1
    },
    t_asymm = {
        sp_test2%*%sp_test4
    },
    t_symm = {
        sp_test2%*%sp_test3
    },
    times = 100
)

# The speed will be faster if using install.packages instead of load_all()
benchmark_results_4

###########################
benchmark_results_5 <- suppressMessages(microbenchmark(
    vs = {
        sp_test1 %*% sp_test3
    },
    sv = {
        sp_test3%*%sp_test1
    },
    ss = {
        sp_test3%*%sp_test3
    },
    sas = {
        sp_test3%*%sp_test4
    },
    asas = {
        sp_test4%*%sp_test4
    },
    times = 100
))

benchmark_results_5

###########################
benchmark_results_6 <- suppressMessages(microbenchmark(
    dyadic = {
        new_entries = dyadalg(sp_test5)
        sp_test6 = sp_test1
        sp_test6@entries = new_entries
    },
    times = 100
))

benchmark_results_6

# min(eigen(mat_test5)$values)

mat_i = as.matrix(t(sp_test6) %*% sp_test5 %*% sp_test6)
max(abs(mat_i - diag(dim(mat_test5)[1])))

condition_number = kappa(mat_test5)

#################################################################################
# Adjust for the numerical issues

sp_test7 = sp_test5
for (i in 1:N1) {
    for (j in 1:(2^(N1-i))) {
        cen_id = (2^(i-1)-1)*k1 + 1
        sp_test7@entries[[i]][cen_id:(cen_id + k1-1), ((j-1)*k1+1):(j*k1)] =  sp_test7@entries[[i]][cen_id:(cen_id + k1-1), ((j-1)*k1+1):(j*k1)] + N1*diag(k1)
    }
}

mat_test7 = as.matrix(sp_test7)

condition_number_2 = kappa(mat_test7)

###########################
benchmark_results_7 <- suppressMessages(microbenchmark(
    dyadic = {
        sp_test8 = dyadalg(sp_test7)
    },
    dyadic_inv = {
        sp_test8 = dyadalg(sp_test7, inv=TRUE)
    },
    times = 100
))

benchmark_results_7




# Unit: milliseconds
# expr      min       lq     mean   median       uq      max neval  cld
# v_symm 175.6882 183.3829 191.6438 187.4812 193.7421 297.7853   100 a
# symm_h 175.5445 185.5458 198.2778 191.3060 195.5286 310.7483   100 a
# symm_asymm 272.0526 289.5934 302.5225 295.2624 300.4562 409.3335   100  b
# symm_asymm_new 230.3461 239.4560 256.7938 247.7572 252.3842 375.5852   100   c
# vh 126.2228 132.2823 138.6256 136.5071 142.2950 175.4491   100    d

# > benchmark_results_6
# Unit: milliseconds
# expr      min       lq     mean   median       uq      max neval cld
# vs 133.3509 141.4053 152.6872 152.6389 161.7221 184.4161   100  a
# vh 123.5043 137.0346 146.7684 147.5448 153.5172 255.7036   100   b
