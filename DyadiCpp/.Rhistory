devtools::load_all()
library(DyadiCpp)
library(microbenchmark)
N = 4
k = 3
N1 = 10
k1 = 4
set.seed(100)
sp_test1 = construct(N1, k1, type="vert", distr="unif")
sp_test2 = t(sp_test1)
sp_test3 = construct(N1, k1, type="symm", distr="unif")
sp_test4 = construct(N1, k1, type="asymm", distr="unif")
sp_test5 = t(sp_test1) %*% sp_test1
sp_test5@type = "symm"
sp_test5@aentries = list()
mat_test1 = dyad2matrix(sp_test1)
mat_test2 = dyad2matrix(sp_test2)
mat_test3 = dyad2matrix(sp_test3)
mat_test4 = dyad2matrix(sp_test4)
mat_test5 = dyad2matrix(sp_test5)
sp_test7 = sp_test5
for (i in 1:N1) {
for (j in 1:(2^(N1-i))) {
cen_id = (2^(i-1)-1)*k1 + 1
sp_test7@entries[[i]][cen_id:(cen_id + k1-1), ((j-1)*k1+1):(j*k1)] =  sp_test7@entries[[i]][cen_id:(cen_id + k1-1), ((j-1)*k1+1):(j*k1)] + N1*diag(k1)
}
}
mat_test7 = dyad2matrix(sp_test7)
condition_number_2 = kappa(mat_test7)
benchmark_results_7 <- suppressMessages(microbenchmark(
dyadic = {
sp_test8 = dyadalg(sp_test7)
},
times = 100
))
benchmark_results_7
benchmark_results_7 <- suppressMessages(microbenchmark(
dyadic = {
sp_test8 = dyadalg(sp_test7)
},
dyadic_inv = {
sp_test8 = dyadalg(sp_test7, inv=TRUE)
}
times = 100
benchmark_results_7 <- suppressMessages(microbenchmark(
dyadic = {
sp_test8 = dyadalg(sp_test7)
},
dyadic_inv = {
sp_test8 = dyadalg(sp_test7, inv=TRUE)
},
times = 100
))
benchmark_results_7
benchmark_results_7 <- suppressMessages(microbenchmark(
dyadic = {
sp_test8 = dyadalg(sp_test7)
},
dyadic_inv = {
sp_test8 = dyadalg(sp_test7, inv=TRUE)
},
times = 100
))
benchmark_results_7
install.packages("./DyadiCpp", repos=NULL, type="source")
install.packages(".", repos=NULL, type="source")
devtools::clean_dll()
?DyadiCpp::dyadalg
??DyadiCpp::dyadalg
??construct
??dyadalg
?dyad2matrix
devtools::document()
devtools::clean_dll()
devtools::document()
N <- 4
k <- 3
# A 48x48 vertically dyadic matrix
V <- construct(N, k, type = "vert", distr = "unif")
N <- 4
k <- 3
# A 48x48 vertically dyadic matrix
V <- construct(N, k, type = "vert", distr = "unif")
N <- 4
k <- 3
# A 48x48 vertically dyadic matrix
V <- construct(N, k, type = "vert", distr = "unif")
# A 48x48 symmetrically dyadic matrix
S <- t(V) %*% V
devtools::document()
N <- 4
k <- 3
# A 48x48 vertically dyadic matrix
V <- construct(N, k, type = "vert", distr = "unif")
# A 48x48 symmetrically dyadic matrix
S <- t(V) %*% V
# Find the vertically dyadic matrix that satisfies P^T S P = I
# using a dyadic factorization algorithm.
P <- dyadalg(S)
